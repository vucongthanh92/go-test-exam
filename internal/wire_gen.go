// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/google/wire"
	"github.com/vucongthanh92/go-test-exam/config"
	"github.com/vucongthanh92/go-test-exam/database"
	"github.com/vucongthanh92/go-test-exam/internal/api"
	"github.com/vucongthanh92/go-test-exam/internal/api/cron"
	"github.com/vucongthanh92/go-test-exam/internal/api/grpc"
	"github.com/vucongthanh92/go-test-exam/internal/api/http"
	"github.com/vucongthanh92/go-test-exam/internal/api/http/v1"
	category2 "github.com/vucongthanh92/go-test-exam/internal/application/category"
	"github.com/vucongthanh92/go-test-exam/internal/application/cronjob"
	product2 "github.com/vucongthanh92/go-test-exam/internal/application/product"
	supplier2 "github.com/vucongthanh92/go-test-exam/internal/application/supplier"
	"github.com/vucongthanh92/go-test-exam/internal/repository/persistent/category"
	"github.com/vucongthanh92/go-test-exam/internal/repository/persistent/product"
	"github.com/vucongthanh92/go-test-exam/internal/repository/persistent/supplier"
	"github.com/vucongthanh92/go-test-exam/redis"
)

// Injectors from wire.go:

func InitializeContainer(appCfg *config.AppConfig, readDb *database.GormReadDb, writeDb *database.GormWriteDb, redisClient redis.Client) *api.ApiContainer {
	productQueryRepoI := product.NewProductQueryRepository(readDb)
	productService := product2.NewProductService(productQueryRepoI)
	productHandler := v1.NewProductHandler(productService)
	categoryCommandRepoI := category.NewCategoryCommandRepository(writeDb)
	categoryService := category2.NewCategoryService(productQueryRepoI, categoryCommandRepoI)
	categoryHandler := v1.NewCategoryHandler(categoryService)
	supplierQueryRepoI := supplier.NewSupplierQueryRepository(readDb)
	supllierService := supplier2.NewSupplierService(supplierQueryRepoI)
	supplierHandler := v1.NewSupplierHandler(supllierService)
	server := http.NewServer(appCfg, productHandler, categoryHandler, supplierHandler)
	grpcServer := grpc.NewServer(appCfg)
	cronJobService := cronjob.NewCronJobService()
	cronServer := cron.NewServer(appCfg, cronJobService)
	apiContainer := api.NewApiContainer(server, grpcServer, cronServer)
	return apiContainer
}

// wire.go:

var container = wire.NewSet(api.NewApiContainer)

var apiSet = wire.NewSet(cron.NewServer, grpc.NewServer, http.NewServer)

var handlerSet = wire.NewSet(v1.NewProductHandler, v1.NewCategoryHandler, v1.NewSupplierHandler)

var serviceSet = wire.NewSet(cronjob.NewCronJobService, product2.NewProductService, category2.NewCategoryService, supplier2.NewSupplierService)

var repoSet = wire.NewSet(product.NewProductCommandRepository, product.NewProductQueryRepository, category.NewCategoryCommandRepository, category.NewCategoryQueryRepository, supplier.NewSupplierCommandRepository, supplier.NewSupplierQueryRepository)
